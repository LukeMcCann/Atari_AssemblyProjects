# 6502 Assembly Instructions

    TXS - Transfer X register to stack pointer register

## Load and Store

<!--Load a given value form a register, or Store a value from a register to a memory address-->

    LDA - Load the A register
    LDX - Load the X register
    LDY -  Load the Y register

    STA - Store the A register
    STX - Store the X register
    STY - Store the Y register


## Arithmetic Instructions

<!--in 6502 there are two arithmetic modes, binary and decimal (BCD/Binary Coded Decimal)-->

    ADC - Add to accumulator (with carry)
    SBC - Subtract from the accumulator (with carry)

    CLC - Clears the carry flag, usually performed before addition
    SEC - Sets the carry flag, usually performed before subtraction

    INC - Increment memory by one
    INX - Increment X by one
    INY - Increment Y by one

    DEC - Decrement memory by one
    DEX - decrement X by one
    DEY - decrement Y by one

    (Flag) Z = 1 if result is zero, else 0
    (Flag) N = 1 if 7 bit (sign) is 1, else 0 

## Jump and Branch Instructions

    JMP - Jump to another location     - GOTO

    BCC - Branch on carry clear        - C == 0
    BCS - Branch on Carry set          - C == 1
    BEQ - Branch on equal to zero      - Z == 1
    BNE - Branch on not equal to zero  - Z == 0
    BMI - Branch on minus              - N == 1
    BPL - Branch on plus               - N == 0
    BVC - Branch on overflow clear     - V == 0
    BVS - Branch on overflow set       - V == 1

    the final column is equivalent to saying: if(flag == val)

    The branch operations simply jump if the flag value is the same as on the right.

## Op-code PROCESSOR

Set processor (e.g. PROCESSOR 6502)

## Op-code SEG

Atari Reference:
"The SEG pseudo-op: Though it is not strictly necessary, all of our code uses it. Without the .U extension, SEG will create binary data for our ROM. With the .U, SEG just allows DASM to populate its symbol table with names/values."

SEG.U Variables: the label "Variables" will appear in our symbol table's segment list

SEG: end of uninitialised segment - start of ROM binary

Define new segment start (e.g. SEG code)

## Op-code ORG

Set the origin of code in memory.

Our code in memory resides in the ROM (read-only memory) space. 
Data stored here may only be read.

Our code should always start at the default position of $F000 in memory

## Op-code SEI 

Set interrupt code disabled.

## Op-code CLD

Clear decimal mode (disabled BCD (Binary Coded Decimal) decimal math mode)

## Labels

Code in assembly is indented one indentation to the right.
To place Labels we ignore indentation as such:

    PROCESSOR 6502
    SEG code
    ORG $F000

Start:


Here "Start" is a Label, labels can be placed at the beginning to a statement, during assemblty the label is assigned
the current valye of the active location counter and serves as an instruction operand.

Labels can either be symbolic or numeric.

### Symbolic Labels

A symbolic label consists of an identifier followed by a colon. 
These labels must be defined only once. Symbolic labels have 
a global scope and appear in the object files symbol table.


### Numeric Labels

A numeric label consists of a single digit in the range zero through nine followed by a colon.
Numeric labels are used only for local reference and are not included in the object files symbol table.
Numeric labels have limited scope and can therefore be redefined repeatedly.

When a numeric ;label is used as a reference (e.g. as an instruction operand) the suffixes "b" (backward) and "f" (forward)
should be added to the numeric label. For numeric label N the reference N b referes to the nearest label N defined before the reference, and the reference N f refers to the nearest label N defined after the reference. 
